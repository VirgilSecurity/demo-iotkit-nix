import org.jenkinsci.plugins.workflow.steps.FlowInterruptedException

run_ok = true
summary_msg = "PROJECT: ${currentBuild.fullDisplayName}\n COMMENT: ${BUILD_COMMENT}\n\n"

CONTAINER_NAME = "jenkins-fc29-${env.JOB_NAME}-${env.BUILD_NUMBER}"

STAGE_GRAB_SCM = "Grab SCM"
STAGE_PREPARE_CONTAINER = "Prepare Docker container"
STAGE_CPP_CHECK = "Static analysis: Cppcheck"
STAGE_PVS_STUDIO = "Static analysis: PVS-Studio"
STAGE_RPI_GW_TESTS_ASAN = "Run rpi-gw-tests (with asan)"
STAGE_RPI_GW_TESTS_VALGRIND = "Run rpi-gw-tests (with valgrind)"


def DiscordSetHook() {
    if ( currentBuild.currentResult == "SUCCESS" ) {
        return "discord-hook"
    } else {
        return "iot-tests-fails"
    }
}

def aborted(e) {
    currentBuild.result = "ABORTED"
    summary_msg="${summary_msg}\nABORTED\n"
    throw e
}

def failed(Stage) {
    run_ok = false
    ConcatState(Stage, "FAILED")
}

def ConcatState(Stage,State) {
    summary_msg="${summary_msg}  STAGE: ${Stage} - ${State}\n"
}

// Pipeline code
node ("$BUILD_HOST") {

    try {
        stage(STAGE_GRAB_SCM) {
            cleanWs()
            checkout scm
            ConcatState(STAGE_GRAB_SCM, "OK BRANCH:[${BRANCH_SELECTOR}]")
        }

        stage(STAGE_PREPARE_CONTAINER) {
            sh "sudo docker pull 1609-hub.virgilsecurity.com:8443/iotl/fedora29-devel"
            sh "sudo docker run -d --rm \
                --cap-add SYS_PTRACE \
                --name ${CONTAINER_NAME} \
                -e BUILD_UID=\$(id -u) \
                -e BUILD_GID=\$(id -g) \
                -v ${workspace}/:/home/jenkins/iotl  1609-hub.virgilsecurity.com:8443/iotl/fedora29-devel"
            echo 'Waiting creating user Jenkins in container'
            sh "sudo docker exec ${CONTAINER_NAME} bash -c \'/usr/local/bin/started.sh\'"
            sh "mkdir -p artifacts"
            ConcatState(STAGE_PREPARE_CONTAINER, "OK")
        }

        try {
            stage(STAGE_CPP_CHECK) {
                if (STATIC_ANALYZE != "true") {
                    ConcatState(STAGE_CPP_CHECK, "SKIPPED")
                    return
                }
                sh "sudo docker exec  -u jenkins ${CONTAINER_NAME} bash -c \'cd  ~/iotl &&\
                     ./scripts/analyze/cpp-check.sh 2>&1 | tee artifacts/cppcheck.log; exit \${PIPESTATUS[0]}\'"
                ConcatState(STAGE_CPP_CHECK, "OK")
            }
        } catch (FlowInterruptedException e) {
            aborted(e)
        } catch (any) {
            failed(STAGE_CPP_CHECK)
        }

        try {
            stage(STAGE_PVS_STUDIO) {
                if (STATIC_ANALYZE != "true") {
                    ConcatState(STAGE_PVS_STUDIO, "SKIPPED")
                    return
                }
                   
                sh "sudo docker exec -u jenkins ${CONTAINER_NAME} bash -c \'cd  ~/iotl &&\
                     ./scripts/analyze/pvs-check.sh 2>&1 | tee artifacts/pvs.log; exit \${PIPESTATUS[0]}\'"
                ConcatState(STAGE_PVS_STUDIO, "OK")
            }
        } catch (FlowInterruptedException e) {
            aborted(e)
        } catch (any) {
            failed(STAGE_PVS_STUDIO)
        }

        try {
            stage(STAGE_RPI_GW_TESTS_ASAN) {
                sh "sudo docker exec  -u jenkins ${CONTAINER_NAME} bash -c \'cd  ~/iotl &&\
                      scripts/jenkins/build-rpi-gw-tests-asan.sh 2>&1 | tee artifacts/build-rpi-gw-tests-asan.log; exit \${PIPESTATUS[0]}\'"
                
                sh "sudo docker exec  -u jenkins ${CONTAINER_NAME} bash -c \'cd  ~/iotl &&\
                      cmake-build-debug/tests/rpi_gw_tests 2>&1 | tee artifacts/rpi-gw-tests-asan.log; exit \${PIPESTATUS[0]} \'"

                ConcatState(STAGE_RPI_GW_TESTS_ASAN, "OK")
            }
        } catch (FlowInterruptedException e) {
            aborted(e)
        } catch (any) {
            failed(STAGE_RPI_GW_TESTS_ASAN)
        }

        try {
            stage(STAGE_RPI_GW_TESTS_VALGRIND) {
                if (RUN_IN_VALGRIND != "true") {
                    ConcatState(STAGE_RPI_GW_TESTS_VALGRIND, "SKIPPED")
                    return
                }

                sh "sudo docker exec -u jenkins ${CONTAINER_NAME} bash -c \'cd  ~/iotl &&\
                  scripts/jenkins/build-rpi-gw-tests.sh 2>&1 | tee artifacts/build-rpi-gw-tests.log; exit \${PIPESTATUS[0]} \'"

                valgrind_cmd = """
                valgrind --error-exitcode=128 \
                    --tool=memcheck \
                    --leak-check=full \
                    --leak-resolution=med \
                    --track-origins=yes \
                    --vgdb=no \
                    cmake-build-debug/tests/rpi_gw_tests
                """
                sh "sudo docker exec -u jenkins ${CONTAINER_NAME} bash -c \'cd  ~/iotl &&\
                 ${valgrind_cmd}\' 2>&1 | tee artifacts/rpi-gw-tests-valgrind.log; exit \${PIPESTATUS[0]}"

                ConcatState(STAGE_RPI_GW_TESTS_VALGRIND, "OK")
            }
        } catch (FlowInterruptedException e) {
            aborted(e)
        } catch (any) {
            failed(STAGE_RPI_GW_TESTS_VALGRIND)
        }

    } finally {
        // Cleanup
        sh "sudo docker rm -f ${CONTAINER_NAME} || true"
        sh "sudo docker volume prune -f || true"

        // Set build status
        if(run_ok && currentBuild.result != "ABORTED") {
            currentBuild.result = "SUCCESS"
        } else {
            currentBuild.result = "FAILURE"
        }

        // Discord notification
        if ( DISKORD_NOTIFY == "true" ) {
            try {
                withCredentials([string(credentialsId: DiscordSetHook(), variable: 'WEBHOOK')]) {
                    discordSend description: summary_msg,
                            footer: 'Job state: ' + currentBuild.currentResult,
                            link: env.BUILD_URL,
                            result: currentBuild.currentResult,
                            title: JOB_NAME,
                            webhookURL: WEBHOOK
                }
            }
            catch(any) { }
        }

        // Archive artifacts
        writeFile file: 'artifacts/summary.log', text: "${summary_msg}"
        archiveArtifacts('artifacts/**/*')

        echo "#----------- SUMMARY RESULTS -----------"
        echo "# ${summary_msg}"
        echo "#---------------------------------------"

    }
}